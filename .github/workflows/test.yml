name: Node CI

on:
  push:
    branches:
      - "*"
      - "*/*"

jobs:
  prepare:
    name: Install Dependencies
    runs-on: ubuntu-18.04
    if: "!(contains(github.actor, 'process-engine-ci') || contains(github.actor, 'admin'))"

    steps:
    - uses: actions/checkout@master

    - name: Use Node.js 12.x
      uses: actions/setup-node@v1
      with:
        node-version: 12.x

    - name: Install Dependencies
      working-directory: ./_integration_tests
      run: |
        npm i

    - name: Cache node modules
      uses: actions/cache@v1
      with:
        path: _integration_tests/node_modules
        key: npm-${{ hashFiles('_integration_tests/package-lock.json') }}

    - name: Stash package-lock.json
      uses: actions/upload-artifact@master
      with:
        name: package-lock_json
        path: _integration_tests/package-lock.json

  test_sqlite:
    name: "Test with SQLite"
    needs: prepare_version
    runs-on: ubuntu-18.04
    steps:
    - uses: actions/checkout@master

    - name: Unstash package-lock.json
      uses: actions/download-artifact@master
      with:
        name: package-lock_json
        path: "./_integration_tests"

    - name: Get node_modules from Cache
      uses: actions/cache@v1
      with:
        path: _integration_tests/node_modules
        key: npm-${{ hashFiles('_integration_tests/package-lock.json') }}

    - name: Build
      working-directory: ./_integration_tests
      run: npm run build

    - name: Run Tests
      working-directory: ./_integration_tests
      run: npm run test-sqlite

    - name: Slack Notification
      uses: homoluctus/slatify@master
      if: always()
      with:
        type: ${{ job.status }}
        job_name: 'Test with SQLite'
        mention_if: 'always'
        url: ${{ secrets.SLACK_WEBHOOK }}
        commit: true
        token: ${{ secrets.GH_TOKEN }}

  test_postgres:
    name: "Test with Postgres"
    needs: prepare_version
    runs-on: ubuntu-18.04

    services:
      postgres:
        image: postgres:11
        env:
          POSTGRES_USER: admin
          POSTGRES_PASSWORD: admin
          POSTGRES_DB: processengine
        ports:
        - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
    - uses: actions/checkout@master

    - name: Unstash package-lock.json
      uses: actions/download-artifact@master
      with:
        name: package-lock_json
        path: "./_integration_tests"

    - name: Get node_modules from Cache
      uses: actions/cache@v1
      with:
        path: _integration_tests/node_modules
        key: npm-${{ hashFiles('_integration_tests/package-lock.json') }}

    - name: Build
      working-directory: ./_integration_tests
      run: npm run build

    - name: Run Tests
      working-directory: ./_integration_tests
      run: npm run test-postgres

    - name: Slack Notification
      uses: homoluctus/slatify@master
      if: always()
      with:
        type: ${{ job.status }}
        job_name: 'Test with Postgres'
        mention_if: 'always'
        url: ${{ secrets.SLACK_WEBHOOK }}
        commit: true
        token: ${{ secrets.GH_TOKEN }}

  test_mysql:
    name: "Test with MySQL"
    needs: prepare_version
    runs-on: ubuntu-18.04
    steps:
    - uses: actions/checkout@master

    - name: Unstash package-lock.json
      uses: actions/download-artifact@master
      with:
        name: package-lock_json
        path: "./_integration_tests"

    - name: Get node_modules from Cache
      uses: actions/cache@v1
      with:
        path: _integration_tests/node_modules
        key: npm-${{ hashFiles('_integration_tests/package-lock.json') }}

    - name: Build
      working-directory: ./_integration_tests
      run: npm run build

    - run: mv config/test-mysql/.my.cnf ~/.my.cnf
      working-directory: ./_integration_tests

    - run: echo "create database processengine" | mysql

    - name: Run Tests
      working-directory: ./_integration_tests
      run: npm run test-mysql

    - name: Slack Notification
      uses: homoluctus/slatify@master
      if: always()
      with:
        type: ${{ job.status }}
        job_name: 'Test with MySQL'
        mention_if: 'always'
        url: ${{ secrets.SLACK_WEBHOOK }}
        commit: true
        token: ${{ secrets.GH_TOKEN }}

